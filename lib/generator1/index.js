'use strict';

const _ = require('lodash');

const Transformer = require('../transformers/transformer');
const getDataType = require('./get-data-type');

module.exports = class Generator {
    constructor(definition, profile) {
        this.definition = definition;
        this.profile = profile;
        this.transform = new Transformer(profile);
    }

    generate() {
        this.code = [];
        this.generateInitialCode();
        this.code.push('');
        this.generateServices();
        this.code.push('');
        this.generateModels();
        this.code.push('');
        this.generateEnums();
        this.code.push('');
        this.generateModelFactories();
        return this.code.join(require('os').EOL);
    }

    generateInitialCode() {
        this.code.push(
            `//------------------------------`,
            `// <auto-generated>`,
            `//     Generated using the swagen tool`,
            `// </auto-generated>`,
            `//------------------------------`
        );

        if (this.definition.metadata.title) {
            this.code.push(`// ${this.definition.metadata.title}`);
        }
        if (this.definition.metadata.description) {
            this.code.push(`// ${this.definition.metadata.description}`);
        }
        if (this.definition.metadata.baseUrl) {
            this.code.push(`// Base URL: ${this.definition.metadata.baseUrl}`);
        }

        this.code.push('');

        for (let i = 0; i < (this.profile.options.references || []).length; i++) {
            this.code.push(`/// <reference path="${this.profile.options.references[i]}"/>`);
        }
    }

    generateServices() {
        this.code.push(
            `namespace ${this.profile.options.namespaces.services} {`,
            `    import __models = ${this.profile.options.namespaces.models};`,
            ``
        );

        for (let serviceName in this.definition.services) {
            let service = this.definition.services[serviceName];
            let transformedServiceName = this.transform.serviceName(serviceName, {
                service: service
            }) + (this.profile.options.serviceSuffix || 'Client');
            this.generateInterface(transformedServiceName, serviceName, service);
            this.code.push('');
            this.generateImplementation(transformedServiceName, serviceName, service);
            this.code.push('');
            this.generateModuleRegistration(transformedServiceName, serviceName, service);
            this.code.push('');
        }
        this.generateBuildUrlFunction();

        this.code.push(`}`);
    }

    generateInterface(transformedServiceName, serviceName, service) {
        this.code.push(`    export interface I${transformedServiceName} {`);
        for (let operationName in service) {
            let operation = service[operationName];
            let transformedOperationName = this.transform.operationName(operationName, {
                transformedServiceName: transformedServiceName,
                serviceName: serviceName,
                service: service
            });
            this.code.push(`        ${this.getMethodSignature(transformedOperationName, operation)};`)
        }
        this.code.push('    }');
    }

    generateImplementation(transformedServiceName, serviceName, service) {
        let baseUrl = this.profile.options.baseUrl;
        let baseUrlVariable = baseUrl.variable || _.camelCase(baseUrl.provider);
        let baseUrlPath = baseUrl.path ? baseUrlVariable + '.' + baseUrl.path.join('.') : baseUrlVariable;
        this.code.push(
            `    export class ${transformedServiceName} implements I${transformedServiceName} {`,
            `        private baseUrl: string;`,
            ``,
            `        public static $inject: string[] = ['$http', '$q', '${baseUrlVariable}'];`,
            `        constructor(`,
            `            private $http: ng.IHttpService,`,
            `            private $q: ng.IQService,`,
            `            ${baseUrlVariable}?: ${baseUrl.provider}`,
            `        ) {`,
            `            this.baseUrl = ${baseUrlPath};`,
            `        }`
        );

        for (let operationName in service) {
            let operation = service[operationName];
            let transformedOperationName = this.transform.operationName(operationName, {
                transformedServiceName: transformedServiceName,
                serviceName: serviceName,
                service: service
            });

            this.code.push(
                ``,
                `        /**`,
                `         * ${operation.description || '<No description>'}`,
                `         */`,
                `        public ${this.getMethodSignature(transformedOperationName, operation)} {`
            );

            //Code to check required parameters.
            let requiredParams = (operation.parameters || []).filter(p => !!p.required);
            for (let i = 0; i < requiredParams.length; i++) {
                let requiredParam = requiredParams[i];
                this.code.push(
                    `            if (${requiredParam.name} == undefined || ${requiredParam.name} == null) {`,
                    `                throw 'The parameter \\'${requiredParam.name}\\' must be defined.';`,
                    `            }`
                )
            }

            //Resolve path parameters in relative URL.
            let pathParams = (operation.parameters || []).filter(p => p.type === 'path');
            let hasPathParams = pathParams.length > 0;
            this.code.push(`            let resourceUrl: string = '${operation.path}'${hasPathParams ? '' : ';'}`);
            for (let i = 0; i < pathParams.length; i++) {
                let isLastParam = i === pathParams.length - 1;
                this.code.push(`                .replace('{${pathParams[i].name}}', encodeURIComponent('' + ${pathParams[i].name}))${isLastParam ? ';' : ''}`);
            }

            let queryParams = (operation.parameters || []).filter(p => p.type === 'query');
            let hasQueryParams = queryParams.length > 0;
            if (hasQueryParams) {
                this.code.push(`            let queryParams: {[key: string]: string} = {`);
                for (let i = 0; i < queryParams.length; i++) {
                    let isLastParam = i === queryParams.length - 1;
                    this.code.push(`                ${queryParams[i].name}: encodeURIComponent('' + ${queryParams[i].name})${isLastParam ? '' : ','}`);
                }
                this.code.push(`            };`)
            }

            let bodyParam = (operation.parameters || []).find(p => p.type === 'body');
            let returnType = this.getReturnType(operation);
            this.code.push(
                `            return this.$q<${returnType}>(`,
                `                (resolve: ng.IQResolveReject<${returnType}>, reject: ng.IQResolveReject<any>) => {`,
                `                    this.$http<${returnType}>({`
            );
            if (bodyParam) {
                this.code.push(
                    `                        data: ${bodyParam.name},`
                );
            }
            this.code.push(
                `                        method: '${operation.verb.toUpperCase()}',`,
                `                        url: buildServiceUrl(this.baseUrl, resourceUrl, ${hasQueryParams ? 'queryParams' : 'undefined'})`,
                `                    }).success((data: ${returnType}, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {`,
                `                        resolve(data);`,
                `                    }).error((data: any, status: number, headers: ng.IHttpHeadersGetter, config: ng.IRequestConfig) => {`,
                `                        reject(data);`,
                `                    });`,
                `                }`,
                `            );`,
                `        }`
            );
        }

        this.code.push('    }');
    }

    generateModuleRegistration(transformedServiceName, serviceName, service) {
        //TODO: Move to profile validation function
        if (!this.profile.options.moduleName) {
            throw `Must specify a module name to register the services under.`;
        }
        let registeredServiceName = _.camelCase(transformedServiceName);
        this.code.push(`    angular.module('${this.profile.options.moduleName}').service('${registeredServiceName}', ${transformedServiceName});`);
    }

    getReturnType(operation) {
        if (!operation.responses) {
            return 'any';
        }

        for (let statusKey in operation.responses) {
            let statusCode = +statusKey;
            if (statusCode >= 200 && statusCode < 300 && operation.responses[statusKey].dataType) {
                return getDataType(operation.responses[statusKey].dataType, undefined, this.profile.options.namespaces.models);
            }
        }

        return 'any';
    }

    getMethodSignature(operationName, operation) {
        let parameters = '';
        for (let p = 0; p < (operation.parameters || []).length; p++) {
            let parameter = operation.parameters[p];
            if (parameters) {
                parameters += ', '
            }
            parameters += `${parameter.name}: ${getDataType(parameter.dataType, parameter.name, this.profile.options.namespaces.models)}`;
        }

        let returnType = this.getReturnType(operation);

        let methodSig = `${operationName}(${parameters}): ng.IPromise<${returnType}>`;
        return methodSig;
    }

    generateBuildUrlFunction() {
        this.code.push(
            `    function buildServiceUrl(baseUrl: string, resourceUrl: string, queryParams?: {[name: string]: string}): string {`,
            `        let url: string = baseUrl;`,
            `        let baseUrlSlash: boolean = url[url.length - 1] === '/';`,
            `        let resourceUrlSlash: boolean = resourceUrl[0] === '/';`,
            `        if (!baseUrlSlash && !resourceUrlSlash) {`,
            `            url += '/';`,
            `        } else if (baseUrlSlash && resourceUrlSlash) {`,
            `            url = url.substr(0, url.length - 1);`,
            `        }`,
            `        url += resourceUrl;`,
            ``,
            `        if (queryParams) {`,
            `            let isFirst: boolean = true;`,
            `            for (let p in queryParams) {`,
            `                if (queryParams.hasOwnProperty(p) && queryParams[p]) {`,
            `                    let separator: string = isFirst ? '?' : '&';`,
            `                    url += separator + p + '=' + queryParams[p];`,
            `                    isFirst = false;`,
            `                }`,
            `            }`,
            `        }`,
            ``,
            `        return url;`,
            `    }`
        );
    }

    generateModels() {
        this.code.push(`namespace ${this.profile.options.namespaces.models} {`)
        for (let modelName in this.definition.models) {
            let model = this.definition.models[modelName];
            this.code.push(`    export interface ${modelName} {`);

            for (let propertyName in model) {
                let property = model[propertyName];
                this.code.push(`        ${propertyName}${property.required ? '?' : ''}: ${getDataType(property, propertyName)};`);
            }

            this.code.push('    }');
        }
        this.code.push(`}`);
    }

    generateEnums() {
        this.code.push(`namespace ${this.profile.options.namespaces.models} {`)
        for (let serviceName in this.definition.services) {
            let service = this.definition.services[serviceName];
            for (let operationName in service) {
                let operation = service[operationName];
                for (let i = 0; i < operation.parameters.length; i++) {
                    let dataType = operation.parameters[i].dataType;
                    if (dataType.primitive && dataType.primitive === 'string' && dataType.subType === 'enum') {
                        let enumTypeName = _.upperFirst(_.camelCase(operation.parameters[i].name));
                        this.code.push(`    export type ${enumTypeName}Enum = '${dataType.enumValues.join('\'|\'')}';`)
                    }
                }
            }
        }
        this.code.push(`}`);
    }

    generateModelFactories() {
        this.code.push(
            `namespace ${this.profile.options.namespaces.models} {`,
            `    export class ModelFactory {`
        );

        for (let modelName in this.definition.models) {
            let model = this.definition.models[modelName];

            this.code.push(
                `        public static createEmpty${modelName}(initializer?: (m: ${modelName}) => void): ${modelName} {`,
                `            let model: ${modelName} = {`
            );

            for (let propertyName in model) {
                let property = model[propertyName];
                let value;
                if (property.isArray) {
                    value = '[]';
                } else if (property.complex) {
                    value = `ModelFactory.createEmpty${getDataType(property, propertyName)}()`;
                } else {
                    value = this.getDefaultValueForPrimitive(property);
                }
                this.code.push(`                ${propertyName}: ${value},`);
            }

            this.code.push(
                `            };`,
                `            if (!!initializer) {`,
                `                initializer(model);`,
                `            }`,
                `            return model;`,
                `        }`
            );
        }
        this.code.push(
            `    }`,
            `}`
        );
    }

    getDefaultValueForPrimitive(property) {
        switch (property.primitive) {
            case 'integer':
            case 'number':
                return 'undefined';
            case 'string': {
                switch (property.subType) {
                    case 'date-time':
                        return 'undefined';
                    case 'uuid':
                        return 'undefined';
                    case 'byte':
                        return 'undefined';
                    case 'enum':
                        return 'undefined';
                    default:
                        return `''`;
                }
            }
            case 'boolean':
                return 'false';
            case 'file':
            case 'object':
                return 'undefined';
            default:
                throw `Cannot get a default value for primitive type ${JSON.stringify(property, null, 4)}`;
        }
    }
}
